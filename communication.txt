Program files:
Client:
	- Graphics
	- Uin -> server
	- Keep track of most recent game state
	- Listen to server for game state updates
Server(gen1/server.py):
	- Keep game objects
	- Facilitate communication between clients
		○ Call methods of Game objs
		○ Mutliprocess program to handle multiple game sessions
Game(battleship.py):
	- Game logic
	- Keeps the objective boards
	- Takes player input from server
	- Sends msgs for players to server

Server Client Messages:
NOTE: All message types will be determined by the first int in the bytestring
according to the following paradigm, and all messages should be sent in bytestring format.
	Server -> client messages:
		0 - denotes a flag message - '0 flag#'
		1 - denotes the results of the previous shot - '1 1'=hit '1 0' = miss
		2 - denotes the coordinates of an incoming shot - '2 x y' = enemy has fired on (x,y)

	Client -> Server messages:
		0 - denotes a flag message. - '0 flag#' (not used since server has full knowledge of game state)
		1 - the coordinates of an outgoing shot. - '1 x y' = firing on (x,y)
		2 - the coordinates and orientation of a ship placement - '2 x y v' = place vertical ship at (x,y) (h for horizontal)

Game messages:
	- these messages are generated by a game program and forwarded to the clients by the server
	- game messages are stored in game object's p1Oout and p2Out
	- call broadcastP1() and broadcastP2() to obtain game update messages after each input
	- boardscast methods gives a list of messages
	- each unit message is a list of ints, its type is specified by its first element    	
		MSG_TYPE = {'flag':0, 'fire result':1, 'under fire':2}
    - 
	1. Flag messages [0,1]
	2. Placement messages
	3. Fire result messages 
	4. Flag messages, [int,int], [flag#, optional communication], S->C
	ints could probably be shorts. they just need to store up to max(N,#flags)



Flags:
    flags are a type of S->C communication of a game event. they take the form of [flag#,optional2ndNumber]. The flag#
    is the code of the event. Sometimes an event will have a 2nd number associated with it in which case the opt2ndNum
    will be used. If it is not in use it wll default to -1


FLAGS = {'bad input': 0,
            'wait your turn': 1,
            'your turn':2,
            'not a valid ship placement': 3,
            'other player ready': 4,
            'placed a ship': 5,  (#2nd num = # ships left)
            'repeated fire': 6,
            'game over': 7,  (#2nd num = player# is winner)
            'fire result': 8,
            'place ship':9, (#2nd num -> hit?)
            }